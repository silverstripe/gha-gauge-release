name: Gauge release
description: Gauge if should do a patch release

inputs:
  latest_local_sha:
    description: The latest local sha
    required: true
    type: string

outputs:
  do_release:
    description: Whether to do a release
    value: ${{ steps.gauge-release.outputs.do_release }}
  next_tag:
    description: The patch tag to release
    value: ${{ steps.gauge-release.outputs.next_tag }}

runs:
  using: composite
  steps:
    - name: Gauge release
      id: gauge-release
      shell: bash
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_SHA: ${{ github.sha }}
        LATEST_LOCAL_SHA: ${{ inputs.latest_local_sha }}
      run: |
        DO_RELEASE=1

        # Double check that LATEST_LOCAL_SHA matches GITHUB_SHA
        echo "LATEST_LOCAL_SHA is $LATEST_LOCAL_SHA"
        echo "GITHUB_SHA is $GITHUB_SHA"
        if [[ $LATEST_LOCAL_SHA != $GITHUB_SHA ]]; then
          echo "Not patch releasing because GITHUB_SHA is not equal to latest local sha"
          DO_RELEASE=0
        fi

        # Must be on a minor branch to do a patch release
        if [[ $DO_RELEASE == "1" ]]; then
          if ! [[ $GITHUB_REF_NAME =~ ^[0-9]+\.[0-9]+$ ]]; then
            echo "Not patch releasing because not on a minor branch"
            DO_RELEASE=0
          fi
        fi

        # Validate that this commit is that latest commit for the branch using GitHub API
        # We need to check this in case re-rerunning an old job and there have been new commits since
        if [[ $DO_RELEASE == "1" ]]; then
          # https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28
          RESP_CODE=$(curl -w %{http_code} -s -o __response.json \
          -X GET "https://api.github.com/repos/${GITHUB_REPOSITORY}/commits?sha=${GITHUB_REF_NAME}&per_page=1" \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ github.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          )
          if [[ $RESP_CODE != "200" ]]; then
            echo "Unable to read list of commits - HTTP response code was $RESP_CODE"
            exit 1
          fi
          LATEST_REMOTE_SHA=$(jq -r '.[0].sha' __response.json)
          echo "LATEST_REMOTE_SHA is $LATEST_REMOTE_SHA"
          echo "LATEST_LOCAL_SHA is $LATEST_LOCAL_SHA"
          if [[ $LATEST_REMOTE_SHA != $LATEST_LOCAL_SHA ]]; then
            echo "Not patch releasing because latest remote sha is not equal to latest local sha"
            DO_RELEASE=0
          fi
          # Also validate the sha matches GITHUB_SHA, which is what gha-tag-release will use
          if [[ $GITHUB_SHA != $LATEST_LOCAL_SHA ]]; then
            echo "Not patch releasing because GITHUB_SHA is not equal to latest local sha"
            DO_RELEASE=0
          fi
        fi

        # Check is there is an existing tag on the branch using GitHub API
        # Note cannot use local `git tag` because actions/checkout by default will not checkout tags
        # and you need to checkout full history in order to get them
        LATEST_TAG=""
        NEXT_TAG=""
        if [[ $DO_RELEASE == "1" ]]; then
          # https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#list-matching-references
          RESP_CODE=$(curl -w %{http_code} -s -o __response.json \
          -X GET https://api.github.com/repos/${GITHUB_REPOSITORY}/git/matching-refs/tags/${GITHUB_REF_NAME} \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ github.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          )
          if [[ $RESP_CODE != "200" ]]; then
            echo "Unable to read list of tags - HTTP response code was $RESP_CODE"
            exit 1
          fi
          # Get the latest tag
          LATEST_TAG=$(jq -r '.[].ref' __response.json | grep -Po '(?<=^refs\/tags\/)[0-9]+\.[0-9]+\.[0-9]+$' | sort -V -r | head -n 1) || true
          echo "LATEST_TAG is $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          if ! [[ $LATEST_TAG =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            echo "Not patch releasing because cannot find a matching semver tag on the branch"
            DO_RELEASE=0
          else
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            NEXT_TAG="$MAJOR.$MINOR.$((PATCH+1))"
            echo "NEXT_TAG is $NEXT_TAG"
            echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT
          fi
        fi

        # Check if there is anything relevant commits to release using GitHub API using the tripe-dot compoare endpoint
        # which will show things that are in the next-patch branch that are not in the latest tag
        # Note: unlike CLI, the API endpoint results include all merged pull-requests, not commits
        # Pull-requests prefixed with MNT or DOC will not be considered relevant for releasing
        if [[ $DO_RELEASE == "1" ]]; then
          # Check on github release notes api if there's anything worth releasing
          # Compare commits between current sha with latest tag to see if there is anything worth releasing
          # https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#compare-two-commits
          RESP_CODE=$(curl -w %{http_code} -s -o __response.json \
          -X GET https://api.github.com/repos/$GITHUB_REPOSITORY/compare/$LATEST_TAG...$GITHUB_SHA?per_page=100 \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ github.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          )
          if [[ $RESP_CODE != "200" ]]; then
            echo "Unable to fetch compare two commits - HTTP response code was $RESP_CODE"
            exit 1
          fi
          # Get commits for text parsing
          jq -r '.commits[].commit.message' __response.json > __commits.json
          # Parse comits one line at a time
          HAS_THINGS_TO_RELEASE=0
          while IFS="" read -r line || [[ -n $line ]]; do
            if ! [[ "$line" =~ ^(Merge|MNT|DOC) ]] && ! [[ $line =~ ^[[:space:]]*$ ]]; then
              HAS_THINGS_TO_RELEASE=1
              break
            fi
          done < __commits.json
          if [[ $HAS_THINGS_TO_RELEASE == "0" ]]; then
            echo "Not patch releasing because there is nothing relevant to release"
            DO_RELEASE=0
          fi
        fi

        # Check again, this time using the double-dot syntax which will show the raw diff between the latest tag
        # and the next-patch branch
        # This isn't available via the github api, so screen scrape this instead. Screen scraping isn't
        # great because it's brittle, however if this fails then all that happens is we tag a release that
        # has no actual changes, which isn't the end of the world.
        # Here we are only detecting if there are no actual changes to release, which can happen in a couple of scenarios:
        # a) A change is made and tagged, and then backported to an older branch and then merged-up
        # b) A change made in a previous major that we don't want to keep in current major, so
        #    it's reverted during the merge-up
        if [[ $DO_RELEASE == "1" ]]; then
          RESP_CODE=$(curl -w %{http_code} -s -o __compare.html \
          -X GET https://github.com/$GITHUB_REPOSITORY/compare/$LATEST_TAG..$GITHUB_SHA
          )
          if [[ $RESP_CODE != "200" ]]; then
            echo "Unable to fetch compare html - HTTP response code was $RESP_CODE"
            exit 1
          fi
          PARSED=$(php -r '
            $s = file_get_contents("__compare.html");
            $s = strip_tags($s);
            $s = str_replace("[\r\n]", " ", $s);
            $s = preg_replace("# {2,}#", " ", $s);
            echo $s;
          ')
          # `|| true` needs to be suffixed otherwise an error code of 1 will be omitted when there is no grep match
          IDENTICAL=$(echo $PARSED | grep "$LATEST_TAG and $GITHUB_SHA are identical") || true
          if [[ $IDENTICAL != "" ]]; then
            echo "Not patch releasing because there are no actual changes to release"
            DO_RELEASE=0
          fi
        fi

        echo "do_release output is $DO_RELEASE"
        echo "do_release=$DO_RELEASE" >> $GITHUB_OUTPUT

    - name: Delete temporary files
      if: always()
      shell: bash
      run: |
        if [[ -f __response.json ]]; then
          rm __response.json
        fi
        if [[ -f __commits.json ]]; then
          rm __commits.json
        fi
        if [[ -f __compare.html ]]; then
          rm __compare.html
        fi
